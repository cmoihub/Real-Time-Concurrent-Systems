{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf0 \expnd0\expndtw0\kerning0
Carleton University\
Department of Systems and Computer Engineering\
SYSC 3303 - Real-Time Concurrent Systems - Winter 2016\
\
Assignment 2\
\pard\pardeftab720\partightenfactor0

\b0 \cf0 \
\pard\pardeftab720\partightenfactor0

\i \cf0 The Sandwich-Making Chefs Problem.
\i0  (This problem was first published as the cigarette-smokers problem by S. Patil in 1971, and is one of several classic process-coordination problems that are used to evaluate facilities for synchronizing concurrent threads and processes.)\
Consider a system with three 
\i chef
\i0  threads and one 
\i agent
\i0  thread. Each chef continuously makes a sandwich and then eats it. But to make and eat a sandwich, the chef needs three ingredients: bread, peanut butter, and jam. One of the chef threads has an infinite supply of bread, another has peanut butter, and the third has jam. The agent has an infinite supply of all three ingredients. The agent randomly selects two of the ingredients and places them on a table. The chef who has the remaining ingredient then makes and eats a sandwich, signalling the agent on completion. The agent then puts out another two of the three ingredients, and the cycle repeats.\
If you don't like peanut butter and jam sandwiches, you may choose any three "ingredients" that make up your favourite meal!\
Follow the design process outlined in class to develop a Java monitor that synchronizes the agent and the chefs. Produce UCM(s), UML collaboration diagrams and a UML class diagram for your design. Then write a program (following your design) to simulate the agent and the chefs. The program should run until 20 sandwiches have been made and consumed.\
\pard\pardeftab720\partightenfactor0

\b \cf0 Work Products\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\b0 \cf0 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
A \'93README.txt\'94 file explaining the names of your files, set up instructions, etc.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Your design diagrams including:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
at least one UCM of the system\
\ls1\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
a UML collaboration diagram for each active object\
\ls1\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
a UML class diagram for your system\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Hand-drawn (and then scanned or photographed) diagrams are acceptable, as long as they are neatly drawn and your handwriting is legible.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
The Java source code for your classes, as well as any files required to run these files in Eclipse. Your code should demonstrate good programming style, be well documented, etc.\
\pard\pardeftab720\partightenfactor0

\b \cf0 Reminder\
\pard\pardeftab720\partightenfactor0

\b0 \cf0 The TAs will mark your assignments in the lab environment. It is your responsibility to ensure that your code works in that environment, and that any software required for viewing any text/diagrams is also present in that lab. You must use the Eclipse Java IDE.
\b \
Submitting Assignments\

\b0 Assignments are to be submitted electronically using the assignment \'93submit\'94 program. Emailed submissions will not be accepted. See the course outline for the procedure to follow if illness causes you to miss the deadline.\
Due: Friday, February 5th at midnight SHARP!}